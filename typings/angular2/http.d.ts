// Generated by dts-bundle v0.4.3
// Dependencies for this module:
//   ../../rxjs/Observable

declare module 'angular2/http' {
    export { Request } from 'angular2/http/src/http/static_request';
    export { Response } from 'angular2/http/src/http/static_response';
    export { RequestOptionsArgs, ResponseOptionsArgs, Connection, ConnectionBackend } from 'angular2/http/src/http/interfaces';
    export { BrowserXhr } from 'angular2/http/src/http/backends/browser_xhr';
    export { BaseRequestOptions, RequestOptions } from 'angular2/http/src/http/base_request_options';
    export { BaseResponseOptions, ResponseOptions } from 'angular2/http/src/http/base_response_options';
    export { XHRBackend, XHRConnection } from 'angular2/http/src/http/backends/xhr_backend';
    export { JSONPBackend, JSONPConnection } from 'angular2/http/src/http/backends/jsonp_backend';
    export { Http, Jsonp } from 'angular2/http/src/http/http';
    export { Headers } from 'angular2/http/src/http/headers';
    export { ResponseType, ReadyState, RequestMethod } from 'angular2/http/src/http/enums';
    export { URLSearchParams } from 'angular2/http/src/http/url_search_params';
    /**
        * Provides a basic set of injectables to use the {@link Http} service in any application.
        *
        * The `HTTP_PROVIDERS` should be included either in a component's injector,
        * or in the root injector when bootstrapping an application.
        *
        * ### Example ([live demo](http://plnkr.co/edit/snj7Nv?p=preview))
        *
        * ```
        * import {Component} from 'angular2/core';
        * import {bootstrap} from 'angular2/platform/browser';
        * import {NgFor} from 'angular2/common';
        * import {HTTP_PROVIDERS, Http} from 'angular2/http';
        *
        * @Component({
        *   selector: 'app',
        *   providers: [HTTP_PROVIDERS],
        *   template: `
        *     <div>
        *       <h1>People</h1>
        *       <ul>
        *         <li *ngFor="#person of people">
        *           {{person.name}}
        *         </li>
        *       </ul>
        *     </div>
        *   `,
        *   directives: [NgFor]
        * })
        * export class App {
        *   people: Object[];
        *   constructor(http:Http) {
        *     http.get('people.json').subscribe(res => {
        *       this.people = res.json();
        *     });
        *   }
        *   active:boolean = false;
        *   toggleActiveState() {
        *     this.active = !this.active;
        *   }
        * }
        *
        * bootstrap(App)
        *   .catch(err => console.error(err));
        * ```
        *
        * The primary public API included in `HTTP_PROVIDERS` is the {@link Http} class.
        * However, other providers required by `Http` are included,
        * which may be beneficial to override in certain cases.
        *
        * The providers included in `HTTP_PROVIDERS` include:
        *  * {@link Http}
        *  * {@link XHRBackend}
        *  * `BrowserXHR` - Private factory to create `XMLHttpRequest` instances
        *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
        *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
        *
        * There may be cases where it makes sense to extend the base request options,
        * such as to add a search string to be appended to all URLs.
        * To accomplish this, a new provider for {@link RequestOptions} should
        * be added in the same injector as `HTTP_PROVIDERS`.
        *
        * ### Example ([live demo](http://plnkr.co/edit/aCMEXi?p=preview))
        *
        * ```
        * import {provide} from 'angular2/core';
        * import {bootstrap} from 'angular2/platform/browser';
        * import {HTTP_PROVIDERS, BaseRequestOptions, RequestOptions} from 'angular2/http';
        *
        * class MyOptions extends BaseRequestOptions {
        *   search: string = 'coreTeam=true';
        * }
        *
        * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])
        *   .catch(err => console.error(err));
        * ```
        *
        * Likewise, to use a mock backend for unit tests, the {@link XHRBackend}
        * provider should be bound to {@link MockBackend}.
        *
        * ### Example ([live demo](http://plnkr.co/edit/7LWALD?p=preview))
        *
        * ```
        * import {provide} from 'angular2/core';
        * import {bootstrap} from 'angular2/platform/browser';
        * import {HTTP_PROVIDERS, Http, Response, XHRBackend} from 'angular2/http';
        * import {MockBackend} from 'angular2/http/testing';
        *
        * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
        *
        * var injector = Injector.resolveAndCreate([
        *   HTTP_PROVIDERS,
        *   MockBackend,
        *   provide(XHRBackend, {useExisting: MockBackend})
        * ]);
        * var http = injector.get(Http);
        * var backend = injector.get(MockBackend);
        *
        * // Listen for any new requests
        * backend.connections.observer({
        *   next: connection => {
        *     var response = new Response({body: people});
        *     setTimeout(() => {
        *       // Send a response to the request
        *       connection.mockRespond(response);
        *     });
        *   }
        * });
        *
        * http.get('people.json').observer({
        *   next: res => {
        *     // Response came from mock backend
        *     console.log('first person', res.json()[0].name);
        *   }
        * });
        * ```
        */
    export const HTTP_PROVIDERS: any[];
    /**
        * See {@link HTTP_PROVIDERS} instead.
        *
        * @deprecated
        */
    export const HTTP_BINDINGS: any[];
    /**
        * Provides a basic set of providers to use the {@link Jsonp} service in any application.
        *
        * The `JSONP_PROVIDERS` should be included either in a component's injector,
        * or in the root injector when bootstrapping an application.
        *
        * ### Example ([live demo](http://plnkr.co/edit/vmeN4F?p=preview))
        *
        * ```
        * import {Component} from 'angular2/core';
        * import {NgFor} from 'angular2/common';
        * import {JSONP_PROVIDERS, Jsonp} from 'angular2/http';
        *
        * @Component({
        *   selector: 'app',
        *   providers: [JSONP_PROVIDERS],
        *   template: `
        *     <div>
        *       <h1>People</h1>
        *       <ul>
        *         <li *ngFor="#person of people">
        *           {{person.name}}
        *         </li>
        *       </ul>
        *     </div>
        *   `,
        *   directives: [NgFor]
        * })
        * export class App {
        *   people: Array<Object>;
        *   constructor(jsonp:Jsonp) {
        *     jsonp.request('people.json').subscribe(res => {
        *       this.people = res.json();
        *     })
        *   }
        * }
        * ```
        *
        * The primary public API included in `JSONP_PROVIDERS` is the {@link Jsonp} class.
        * However, other providers required by `Jsonp` are included,
        * which may be beneficial to override in certain cases.
        *
        * The providers included in `JSONP_PROVIDERS` include:
        *  * {@link Jsonp}
        *  * {@link JSONPBackend}
        *  * `BrowserJsonp` - Private factory
        *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
        *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
        *
        * There may be cases where it makes sense to extend the base request options,
        * such as to add a search string to be appended to all URLs.
        * To accomplish this, a new provider for {@link RequestOptions} should
        * be added in the same injector as `JSONP_PROVIDERS`.
        *
        * ### Example ([live demo](http://plnkr.co/edit/TFug7x?p=preview))
        *
        * ```
        * import {provide} from 'angular2/core';
        * import {bootstrap} from 'angular2/platform/browser';
        * import {JSONP_PROVIDERS, BaseRequestOptions, RequestOptions} from 'angular2/http';
        *
        * class MyOptions extends BaseRequestOptions {
        *   search: string = 'coreTeam=true';
        * }
        *
        * bootstrap(App, [JSONP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])
        *   .catch(err => console.error(err));
        * ```
        *
        * Likewise, to use a mock backend for unit tests, the {@link JSONPBackend}
        * provider should be bound to {@link MockBackend}.
        *
        * ### Example ([live demo](http://plnkr.co/edit/HDqZWL?p=preview))
        *
        * ```
        * import {provide, Injector} from 'angular2/core';
        * import {JSONP_PROVIDERS, Jsonp, Response, JSONPBackend} from 'angular2/http';
        * import {MockBackend} from 'angular2/http/testing';
        *
        * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
        * var injector = Injector.resolveAndCreate([
        *   JSONP_PROVIDERS,
        *   MockBackend,
        *   provide(JSONPBackend, {useExisting: MockBackend})
        * ]);
        * var jsonp = injector.get(Jsonp);
        * var backend = injector.get(MockBackend);
        *
        * // Listen for any new requests
        * backend.connections.observer({
        *   next: connection => {
        *     var response = new Response({body: people});
        *     setTimeout(() => {
        *       // Send a response to the request
        *       connection.mockRespond(response);
        *     });
        *   }
        * });
    
        * jsonp.get('people.json').observer({
        *   next: res => {
        *     // Response came from mock backend
        *     console.log('first person', res.json()[0].name);
        *   }
        * });
        * ```
        */
    export const JSONP_PROVIDERS: any[];
    /**
        * See {@link JSONP_PROVIDERS} instead.
        *
        * @deprecated
        */
    export const JSON_BINDINGS: any[];
}

declare module 'angular2/http/src/http/static_request' {
    import { RequestMethod } from 'angular2/http/src/http/enums';
    import { RequestArgs } from 'angular2/http/src/http/interfaces';
    import { Headers } from 'angular2/http/src/http/headers';
    /**
        * Creates `Request` instances from provided values.
        *
        * The Request's interface is inspired by the Request constructor defined in the [Fetch
        * Spec](https://fetch.spec.whatwg.org/#request-class),
        * but is considered a static value whose body can be accessed many times. There are other
        * differences in the implementation, but this is the most significant.
        *
        * `Request` instances are typically created by higher-level classes, like {@link Http} and
        * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
        * One such example is when creating services that wrap higher-level services, like {@link Http},
        * where it may be useful to generate a `Request` with arbitrary headers and search params.
        *
        * ```typescript
        * import {Injectable, Injector} from 'angular2/core';
        * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from 'angular2/http';
        *
        * @Injectable()
        * class AutoAuthenticator {
        *   constructor(public http:Http) {}
        *   request(url:string) {
        *     return this.http.request(new Request({
        *       method: RequestMethod.Get,
        *       url: url,
        *       search: 'password=123'
        *     }));
        *   }
        * }
        *
        * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
        * var authenticator = injector.get(AutoAuthenticator);
        * authenticator.request('people.json').subscribe(res => {
        *   //URL should have included '?password=123'
        *   console.log('people', res.json());
        * });
        * ```
        */
    export class Request {
            /**
                * Http method with which to perform the request.
                */
            method: RequestMethod;
            /**
                * {@link Headers} instance
                */
            headers: Headers;
            /** Url of the remote resource */
            url: string;
            constructor(requestOptions: RequestArgs);
            /**
                * Returns the request's body as string, assuming that body exists. If body is undefined, return
                * empty
                * string.
                */
            text(): String;
    }
}

declare module 'angular2/http/src/http/static_response' {
    import { ResponseType } from 'angular2/http/src/http/enums';
    import { Headers } from 'angular2/http/src/http/headers';
    import { ResponseOptions } from 'angular2/http/src/http/base_response_options';
    /**
        * Creates `Response` instances from provided values.
        *
        * Though this object isn't
        * usually instantiated by end-users, it is the primary object interacted with when it comes time to
        * add data to a view.
        *
        * ### Example
        *
        * ```
        * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
        * ```
        *
        * The Response's interface is inspired by the Response constructor defined in the [Fetch
        * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
        * can be accessed many times. There are other differences in the implementation, but this is the
        * most significant.
        */
    export class Response {
            /**
                * One of "basic", "cors", "default", "error, or "opaque".
                *
                * Defaults to "default".
                */
            type: ResponseType;
            /**
                * True if the response's status is within 200-299
                */
            ok: boolean;
            /**
                * URL of response.
                *
                * Defaults to empty string.
                */
            url: string;
            /**
                * Status code returned by server.
                *
                * Defaults to 200.
                */
            status: number;
            /**
                * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616
                * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)
                *
                * Defaults to "OK"
                */
            statusText: string;
            /**
                * Non-standard property
                *
                * Denotes how many of the response body's bytes have been loaded, for example if the response is
                * the result of a progress event.
                */
            bytesLoaded: number;
            /**
                * Non-standard property
                *
                * Denotes how many bytes are expected in the final response body.
                */
            totalBytes: number;
            /**
                * Headers object based on the `Headers` class in the [Fetch
                * Spec](https://fetch.spec.whatwg.org/#headers-class).
                */
            headers: Headers;
            constructor(responseOptions: ResponseOptions);
            /**
                * Not yet implemented
                */
            blob(): any;
            /**
                * Attempts to return body as parsed `JSON` object, or raises an exception.
                */
            json(): any;
            /**
                * Returns the body as a string, presuming `toString()` can be called on the response body.
                */
            text(): string;
            /**
                * Not yet implemented
                */
            arrayBuffer(): any;
    }
}

declare module 'angular2/http/src/http/interfaces' {
    import { ReadyState, RequestMethod, ResponseType } from 'angular2/http/src/http/enums';
    import { Headers } from 'angular2/http/src/http/headers';
    import { Request } from 'angular2/http/src/http/static_request';
    import { URLSearchParams } from 'angular2/http/src/http/url_search_params';
    /**
        * Abstract class from which real backends are derived.
        *
        * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
        * {@link Request}.
        */
    export abstract class ConnectionBackend {
            abstract createConnection(request: any): Connection;
    }
    /**
        * Abstract class from which real connections are derived.
        */
    export abstract class Connection {
            readyState: ReadyState;
            request: Request;
            response: any;
    }
    /**
        * Interface for options to construct a RequestOptions, based on
        * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.
        */
    export interface RequestOptionsArgs {
            url?: string;
            method?: string | RequestMethod;
            search?: string | URLSearchParams;
            headers?: Headers;
            body?: string;
    }
    /**
        * Required structure when constructing new Request();
        */
    export interface RequestArgs extends RequestOptionsArgs {
            url: string;
    }
    /**
        * Interface for options to construct a Response, based on
        * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.
        */
    export type ResponseOptionsArgs = {
            body?: string | Object | FormData;
            status?: number;
            statusText?: string;
            headers?: Headers;
            type?: ResponseType;
            url?: string;
    };
}

declare module 'angular2/http/src/http/backends/browser_xhr' {
    /**
      * A backend for http that uses the `XMLHttpRequest` browser API.
      *
      * Take care not to evaluate this in non-browser contexts.
      */
    export class BrowserXhr {
        constructor();
        build(): any;
    }
}

declare module 'angular2/http/src/http/base_request_options' {
    import { Headers } from 'angular2/http/src/http/headers';
    import { RequestMethod } from 'angular2/http/src/http/enums';
    import { RequestOptionsArgs } from 'angular2/http/src/http/interfaces';
    import { URLSearchParams } from 'angular2/http/src/http/url_search_params';
    /**
        * Creates a request options object to be optionally provided when instantiating a
        * {@link Request}.
        *
        * This class is based on the `RequestInit` description in the [Fetch
        * Spec](https://fetch.spec.whatwg.org/#requestinit).
        *
        * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}
        * class, which sub-classes `RequestOptions`.
        *
        * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
        *
        * ```typescript
        * import {RequestOptions, Request, RequestMethod} from 'angular2/http';
        *
        * var options = new RequestOptions({
        *   method: RequestMethod.Post,
        *   url: 'https://google.com'
        * });
        * var req = new Request(options);
        * console.log('req.method:', RequestMethod[req.method]); // Post
        * console.log('options.url:', options.url); // https://google.com
        * ```
        */
    export class RequestOptions {
            /**
                * Http method with which to execute a {@link Request}.
                * Acceptable methods are defined in the {@link RequestMethod} enum.
                */
            method: RequestMethod | string;
            /**
                * {@link Headers} to be attached to a {@link Request}.
                */
            headers: Headers;
            /**
                * Body to be used when creating a {@link Request}.
                */
            body: string;
            /**
                * Url with which to perform a {@link Request}.
                */
            url: string;
            /**
                * Search parameters to be included in a {@link Request}.
                */
            search: URLSearchParams;
            constructor({method, headers, body, url, search}?: RequestOptionsArgs);
            /**
                * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
                * existing values. This method will not change the values of the instance on which it is being
                * called.
                *
                * Note that `headers` and `search` will override existing values completely if present in
                * the `options` object. If these values should be merged, it should be done prior to calling
                * `merge` on the `RequestOptions` instance.
                *
                * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
                *
                * ```typescript
                * import {RequestOptions, Request, RequestMethod} from 'angular2/http';
                *
                * var options = new RequestOptions({
                *   method: RequestMethod.Post
                * });
                * var req = new Request(options.merge({
                *   url: 'https://google.com'
                * }));
                * console.log('req.method:', RequestMethod[req.method]); // Post
                * console.log('options.url:', options.url); // null
                * console.log('req.url:', req.url); // https://google.com
                * ```
                */
            merge(options?: RequestOptionsArgs): RequestOptions;
    }
    /**
        * Subclass of {@link RequestOptions}, with default values.
        *
        * Default values:
        *  * method: {@link RequestMethod RequestMethod.Get}
        *  * headers: empty {@link Headers} object
        *
        * This class could be extended and bound to the {@link RequestOptions} class
        * when configuring an {@link Injector}, in order to override the default options
        * used by {@link Http} to create and send {@link Request Requests}.
        *
        * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
        *
        * ```typescript
        * import {provide} from 'angular2/core';
        * import {bootstrap} from 'angular2/platform/browser';
        * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from 'angular2/http';
        * import {App} from './myapp';
        *
        * class MyOptions extends BaseRequestOptions {
        *   search: string = 'coreTeam=true';
        * }
        *
        * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})]);
        * ```
        *
        * The options could also be extended when manually creating a {@link Request}
        * object.
        *
        * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
        *
        * ```
        * import {BaseRequestOptions, Request, RequestMethod} from 'angular2/http';
        *
        * var options = new BaseRequestOptions();
        * var req = new Request(options.merge({
        *   method: RequestMethod.Post,
        *   url: 'https://google.com'
        * }));
        * console.log('req.method:', RequestMethod[req.method]); // Post
        * console.log('options.url:', options.url); // null
        * console.log('req.url:', req.url); // https://google.com
        * ```
        */
    export class BaseRequestOptions extends RequestOptions {
            constructor();
    }
}

declare module 'angular2/http/src/http/base_response_options' {
    import { Headers } from 'angular2/http/src/http/headers';
    import { ResponseOptionsArgs } from 'angular2/http/src/http/interfaces';
    /**
        * Creates a response options object to be optionally provided when instantiating a
        * {@link Response}.
        *
        * This class is based on the `ResponseInit` description in the [Fetch
        * Spec](https://fetch.spec.whatwg.org/#responseinit).
        *
        * All values are null by default. Typical defaults can be found in the
        * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
        *
        * This class may be used in tests to build {@link Response Responses} for
        * mock responses (see {@link MockBackend}).
        *
        * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
        *
        * ```typescript
        * import {ResponseOptions, Response} from 'angular2/http';
        *
        * var options = new ResponseOptions({
        *   body: '{"name":"Jeff"}'
        * });
        * var res = new Response(options);
        *
        * console.log('res.json():', res.json()); // Object {name: "Jeff"}
        * ```
        */
    export class ResponseOptions {
            /**
                * String or Object representing the body of the {@link Response}.
                */
            body: string | Object;
            /**
                * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}
                * associated with the response.
                */
            status: number;
            /**
                * Response {@link Headers headers}
                */
            headers: Headers;
            url: string;
            constructor({body, status, headers, statusText, type, url}?: ResponseOptionsArgs);
            /**
                * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
                * override
                * existing values. This method will not change the values of the instance on which it is being
                * called.
                *
                * This may be useful when sharing a base `ResponseOptions` object inside tests,
                * where certain properties may change from test to test.
                *
                * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
                *
                * ```typescript
                * import {ResponseOptions, Response} from 'angular2/http';
                *
                * var options = new ResponseOptions({
                *   body: {name: 'Jeff'}
                * });
                * var res = new Response(options.merge({
                *   url: 'https://google.com'
                * }));
                * console.log('options.url:', options.url); // null
                * console.log('res.json():', res.json()); // Object {name: "Jeff"}
                * console.log('res.url:', res.url); // https://google.com
                * ```
                */
            merge(options?: ResponseOptionsArgs): ResponseOptions;
    }
    /**
        * Subclass of {@link ResponseOptions}, with default values.
        *
        * Default values:
        *  * status: 200
        *  * headers: empty {@link Headers} object
        *
        * This class could be extended and bound to the {@link ResponseOptions} class
        * when configuring an {@link Injector}, in order to override the default options
        * used by {@link Http} to create {@link Response Responses}.
        *
        * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
        *
        * ```typescript
        * import {provide} from 'angular2/core';
        * import {bootstrap} from 'angular2/platform/browser';
        * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
        * 'angular2/http';
        * import {App} from './myapp';
        *
        * class MyOptions extends BaseResponseOptions {
        *   headers:Headers = new Headers({network: 'github'});
        * }
        *
        * bootstrap(App, [HTTP_PROVIDERS, provide(ResponseOptions, {useClass: MyOptions})]);
        * ```
        *
        * The options could also be extended when manually creating a {@link Response}
        * object.
        *
        * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
        *
        * ```
        * import {BaseResponseOptions, Response} from 'angular2/http';
        *
        * var options = new BaseResponseOptions();
        * var res = new Response(options.merge({
        *   body: 'Angular2',
        *   headers: new Headers({framework: 'angular'})
        * }));
        * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
        * console.log('res.text():', res.text()); // Angular2;
        * ```
        */
    export class BaseResponseOptions extends ResponseOptions {
            constructor();
    }
}

declare module 'angular2/http/src/http/backends/xhr_backend' {
    import { ConnectionBackend, Connection } from 'angular2/http/src/http/interfaces';
    import { ReadyState } from 'angular2/http/src/http/enums';
    import { Request } from 'angular2/http/src/http/static_request';
    import { Response } from 'angular2/http/src/http/static_response';
    import { ResponseOptions } from 'angular2/http/src/http/base_response_options';
    import { BrowserXhr } from 'angular2/http/src/http/backends/browser_xhr';
    import { Observable } from 'rxjs/Observable';
    /**
     * Creates connections using `XMLHttpRequest`. Given a fully-qualified
     * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
     * request.
     *
     * This class would typically not be created or interacted with directly inside applications, though
     * the {@link MockConnection} may be interacted with in tests.
     */
    export class XHRConnection implements Connection {
            request: Request;
            /**
                * Response {@link EventEmitter} which emits a single {@link Response} value on load event of
                * `XMLHttpRequest`.
                */
            response: Observable<Response>;
            readyState: ReadyState;
            constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions);
    }
    /**
        * Creates {@link XHRConnection} instances.
        *
        * This class would typically not be used by end users, but could be
        * overridden if a different backend implementation should be used,
        * such as in a node backend.
        *
        * ### Example
        *
        * ```
        * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from 'angular2/http';
        * @Component({
        *   viewProviders: [
        *     HTTP_PROVIDERS,
        *     provide(Http, {useFactory: (backend, options) => {
        *       return new Http(backend, options);
        *     }, deps: [MyNodeBackend, BaseRequestOptions]})]
        * })
        * class MyComponent {
        *   constructor(http:Http) {
        *     http.request('people.json').subscribe(res => this.people = res.json());
        *   }
        * }
        * ```
        *
        **/
    export class XHRBackend implements ConnectionBackend {
            constructor(_browserXHR: BrowserXhr, _baseResponseOptions: ResponseOptions);
            createConnection(request: Request): XHRConnection;
    }
}

declare module 'angular2/http/src/http/backends/jsonp_backend' {
    import { ConnectionBackend, Connection } from 'angular2/http/src/http/interfaces';
    import { ReadyState } from 'angular2/http/src/http/enums';
    import { Request } from 'angular2/http/src/http/static_request';
    import { Response } from 'angular2/http/src/http/static_response';
    import { ResponseOptions } from 'angular2/http/src/http/base_response_options';
    import { BrowserJsonp } from 'angular2/http/src/http/backends/browser_jsonp';
    import { Observable } from 'rxjs/Observable';
    /**
        * Abstract base class for an in-flight JSONP request.
        */
    export abstract class JSONPConnection implements Connection {
            /**
                * The {@link ReadyState} of this request.
                */
            readyState: ReadyState;
            /**
                * The outgoing HTTP request.
                */
            request: Request;
            /**
                * An observable that completes with the response, when the request is finished.
                */
            response: Observable<Response>;
            /**
                * Callback called when the JSONP request completes, to notify the application
                * of the new data.
                */
            abstract finished(data?: any): void;
    }
    export class JSONPConnection_ extends JSONPConnection {
            constructor(req: Request, _dom: BrowserJsonp, baseResponseOptions?: ResponseOptions);
            finished(data?: any): void;
    }
    /**
        * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.
        */
    export abstract class JSONPBackend extends ConnectionBackend {
    }
    export class JSONPBackend_ extends JSONPBackend {
            constructor(_browserJSONP: BrowserJsonp, _baseResponseOptions: ResponseOptions);
            createConnection(request: Request): JSONPConnection;
    }
}

declare module 'angular2/http/src/http/http' {
    import { RequestOptionsArgs, ConnectionBackend } from 'angular2/http/src/http/interfaces';
    import { Request } from 'angular2/http/src/http/static_request';
    import { Response } from 'angular2/http/src/http/static_response';
    import { RequestOptions } from 'angular2/http/src/http/base_request_options';
    import { Observable } from 'rxjs/Observable';
    /**
        * Performs http requests using `XMLHttpRequest` as the default backend.
        *
        * `Http` is available as an injectable class, with methods to perform http requests. Calling
        * `request` returns an `Observable` which will emit a single {@link Response} when a
        * response is received.
        *
        * ### Example
        *
        * ```typescript
        * import {Http, HTTP_PROVIDERS} from 'angular2/http';
        * @Component({
        *   selector: 'http-app',
        *   viewProviders: [HTTP_PROVIDERS],
        *   templateUrl: 'people.html'
        * })
        * class PeopleComponent {
        *   constructor(http: Http) {
        *     http.get('people.json')
        *       // Call map on the response observable to get the parsed people object
        *       .map(res => res.json())
        *       // Subscribe to the observable to get the parsed people object and attach it to the
        *       // component
        *       .subscribe(people => this.people = people);
        *   }
        * }
        * ```
        *
        *
        * ### Example
        *
        * ```
        * http.get('people.json').observer({next: (value) => this.people = value});
        * ```
        *
        * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
        * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
        * the {@link XHRBackend} provider, as in the following example:
        *
        * ### Example
        *
        * ```typescript
        * import {BaseRequestOptions, Http} from 'angular2/http';
        * import {MockBackend} from 'angular2/http/testing';
        * var injector = Injector.resolveAndCreate([
        *   BaseRequestOptions,
        *   MockBackend,
        *   provide(Http, {useFactory:
        *       function(backend, defaultOptions) {
        *         return new Http(backend, defaultOptions);
        *       },
        *       deps: [MockBackend, BaseRequestOptions]})
        * ]);
        * var http = injector.get(Http);
        * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
        * ```
        *
        **/
    export class Http {
            protected _backend: ConnectionBackend;
            protected _defaultOptions: RequestOptions;
            constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions);
            /**
                * Performs any type of http request. First argument is required, and can either be a url or
                * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
                * object can be provided as the 2nd argument. The options object will be merged with the values
                * of {@link BaseRequestOptions} before performing the request.
                */
            request(url: string | Request, options?: RequestOptionsArgs): Observable<Response>;
            /**
                * Performs a request with `get` http method.
                */
            get(url: string, options?: RequestOptionsArgs): Observable<Response>;
            /**
                * Performs a request with `post` http method.
                */
            post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response>;
            /**
                * Performs a request with `put` http method.
                */
            put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response>;
            /**
                * Performs a request with `delete` http method.
                */
            delete(url: string, options?: RequestOptionsArgs): Observable<Response>;
            /**
                * Performs a request with `patch` http method.
                */
            patch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response>;
            /**
                * Performs a request with `head` http method.
                */
            head(url: string, options?: RequestOptionsArgs): Observable<Response>;
    }
    export class Jsonp extends Http {
            constructor(backend: ConnectionBackend, defaultOptions: RequestOptions);
            /**
                * Performs any type of http request. First argument is required, and can either be a url or
                * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
                * object can be provided as the 2nd argument. The options object will be merged with the values
                * of {@link BaseRequestOptions} before performing the request.
                */
            request(url: string | Request, options?: RequestOptionsArgs): Observable<Response>;
    }
}

declare module 'angular2/http/src/http/headers' {
    /**
        * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
        * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
        *
        * The only known difference between this `Headers` implementation and the spec is the
        * lack of an `entries` method.
        *
        * ### Example ([live demo](http://plnkr.co/edit/MTdwT6?p=preview))
        *
        * ```
        * import {Headers} from 'angular2/http';
        *
        * var firstHeaders = new Headers();
        * firstHeaders.append('Content-Type', 'image/jpeg');
        * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
        *
        * // Create headers from Plain Old JavaScript Object
        * var secondHeaders = new Headers({
        *   'X-My-Custom-Header': 'Angular'
        * });
        * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
        *
        * var thirdHeaders = new Headers(secondHeaders);
        * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
        * ```
        */
    export class Headers {
            constructor(headers?: Headers | {
                    [key: string]: any;
            });
            /**
                * Returns a new Headers instance from the given DOMString of Response Headers
                */
            static fromResponseHeaderString(headersString: string): Headers;
            /**
                * Appends a header to existing list of header values for a given header name.
                */
            append(name: string, value: string): void;
            /**
                * Deletes all header values for the given name.
                */
            delete(name: string): void;
            forEach(fn: (values: string[], name: string, headers: Map<string, string[]>) => void): void;
            /**
                * Returns first header that matches given name.
                */
            get(header: string): string;
            /**
                * Check for existence of header by given name.
                */
            has(header: string): boolean;
            /**
                * Provides names of set headers
                */
            keys(): string[];
            /**
                * Sets or overrides header value for given name.
                */
            set(header: string, value: string | string[]): void;
            /**
                * Returns values of all headers.
                */
            values(): string[][];
            /**
                * Returns string of all headers.
                */
            toJSON(): {
                    [key: string]: any;
            };
            /**
                * Returns list of header values for a given name.
                */
            getAll(header: string): string[];
            /**
                * This method is not implemented.
                */
            entries(): void;
    }
}

declare module 'angular2/http/src/http/enums' {
    /**
        * Supported http methods.
        */
    export enum RequestMethod {
            Get = 0,
            Post = 1,
            Put = 2,
            Delete = 3,
            Options = 4,
            Head = 5,
            Patch = 6,
    }
    /**
        * All possible states in which a connection can be, based on
        * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an
        * additional "CANCELLED" state.
        */
    export enum ReadyState {
            Unsent = 0,
            Open = 1,
            HeadersReceived = 2,
            Loading = 3,
            Done = 4,
            Cancelled = 5,
    }
    /**
        * Acceptable response types to be associated with a {@link Response}, based on
        * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.
        */
    export enum ResponseType {
            Basic = 0,
            Cors = 1,
            Default = 2,
            Error = 3,
            Opaque = 4,
    }
}

declare module 'angular2/http/src/http/url_search_params' {
    /**
      * Map-like representation of url search parameters, based on
      * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
      * with several extensions for merging URLSearchParams objects:
      *   - setAll()
      *   - appendAll()
      *   - replaceAll()
      */
    export class URLSearchParams {
        rawParams: string;
        paramsMap: Map<string, string[]>;
        constructor(rawParams?: string);
        clone(): URLSearchParams;
        has(param: string): boolean;
        get(param: string): string;
        getAll(param: string): string[];
        set(param: string, val: string): void;
        setAll(searchParams: URLSearchParams): void;
        append(param: string, val: string): void;
        appendAll(searchParams: URLSearchParams): void;
        replaceAll(searchParams: URLSearchParams): void;
        toString(): string;
        delete(param: string): void;
    }
}

declare module 'angular2/http/src/http/backends/browser_jsonp' {
    export const JSONP_HOME: string;
    export class BrowserJsonp {
        build(url: string): any;
        nextRequestID(): string;
        requestCallback(id: string): string;
        exposeConnection(id: string, connection: any): void;
        removeConnection(id: string): void;
        send(node: any): void;
        cleanup(node: any): void;
    }
}

